stages:
  - prepare_pipeline
  - build_images
  - build_and_test
  - from_source
  - publish_images
  - cleanup
  - deploy
  - fast_test
  - full_test

variables:
  # https://confluence.cscs.ch/x/Y4DtCw
  HOST_CACHES_PATH: /var/lib/gitlab-runner/cache/ids/sarus

clean_caches:
  stage: prepare_pipeline
  only:
    - schedules
    - clean-caches
  script:
    # Sarus known to be the only project running on this runner
    # https://confluence.cscs.ch/x/Y4DtCw
    - rm -rf $HOST_CACHES_PATH
    - docker system prune -f

prepare_pipeline:
  stage: prepare_pipeline
  script:
    - /home/gitlab-runner/sarus-ops/update.sh
    - CI/check_host.sh

build_dependencies:
  stage: build_images
  script:
    - . CI/utility_docker_functions.bash Debug gcc.cmake $(pwd) $HOST_CACHES_PATH standalone-build standalone-run
    - sarus-build-images

documentation:
  stage: build_and_test
  script:
    - . CI/utility_docker_functions.bash Debug gcc.cmake $(pwd) $HOST_CACHES_PATH standalone-build standalone-run
    - sarus-check-version-and-docs $(pwd)

standalone_debug:
  stage: build_and_test
  script:
    - . ./CI/utility_docker_functions.bash Debug gcc.cmake $(pwd) $HOST_CACHES_PATH standalone-build standalone-run
    - sarus-build-and-test

  artifacts:
    name: "sarus-Debug-$CI_COMMIT_REF_NAME"
    paths:
      - sarus-Debug.tar.gz
      - README.md

standalone_release:
  stage: build_and_test
  script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH standalone-build standalone-run
    - sarus-build-and-test

  artifacts:
    name: "sarus-Release-$CI_COMMIT_REF_NAME"
    paths:
      - sarus-Release.tar.gz
      - README.md

.from_source:
  stage: from_source
  only:
    - master
    - develop

coverage:
  extends: .from_source
  script:
    - . ./CI/utility_docker_functions.bash Debug gcc-gcov.cmake $(pwd) $HOST_CACHES_PATH standalone-build standalone-run
    - sarus-build-and-test

centos7:
  extends: .from_source
  script:
      - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH centos:7 centos:7
      - sarus-build-images
      - sarus-build-from-scratch-and-test

ubuntu18.04:
  extends: .from_source
  script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH ubuntu:18.04 ubuntu:18.04
    - sarus-build-images
    - sarus-build-from-scratch-and-test

ubuntu20.04:
  extends: .from_source
  script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) ~/cache/ids/sarus ubuntu:20.04 ubuntu:20.04
    - sarus-build-images
    - sarus-build-from-scratch-and-test

debian10:
  extends: .from_source
  script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH debian:10 debian:10
    - sarus-build-images
    - sarus-build-from-scratch-and-test

address_sanitizer:
  extends: .from_source
  script:
    - . ./CI/utility_docker_functions.bash Debug gcc-asan.cmake $(pwd) $HOST_CACHES_PATH debian:10 debian:10
    - sarus-build-images
    - sarus-build-from-scratch-and-test

.spack_package:
  extends: .from_source
  timeout: 2h
  script:
    - sarus-build-images
    - sarus-spack-test

spack_ubuntu18.04:
  extends: .spack_package
  before_script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH spack-ubuntu18.04 spack-ubuntu18.04

spack_debian10:
  extends: .spack_package
  only:
    - web
    - schedules
  before_script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH spack-debian10 spack-debian10

spack_centos7:
  extends: .spack_package
  only:
    - web
    - schedules
  before_script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH spack-centos7 spack-centos7

spack_fedora34:
  extends: .spack_package
  only:
    - web
    - schedules
  before_script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH spack-fedora34 spack-fedora34

spack_opensuseleap15.2:
  extends: .spack_package
  only:
    - web
    - schedules
  before_script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH spack-opensuseleap15.2 spack-opensuseleap15.2

publish_images:
  stage: publish_images
  only:
    - master
    - develop
  script:
    - . ./CI/utility_docker_functions.bash
    - sarus-publish-images

cleanup_images:
  stage: cleanup
  except:
    - master
    - develop
  script:
    - . ./CI/utility_docker_functions.bash
    - sarus-cleanup-images

deploy:
  stage: deploy
  only:
    - master
    - develop
    - tags
    - /^.*_reframe$/
    - /^.*_smoke$/
  script:
    - "echo PWD: ${PWD}"
    - ARTIFACT=sarus-Release.tar.gz
    - TARGET_MACHINE=${TARGET_MACHINE:-undefined}
    - DEPLOYMENT_TYPE=${DEPLOYMENT_TYPE:-development}
    - NAME=${CI_COMMIT_TAG:-${CI_COMMIT_BRANCH}}
    - /home/gitlab-runner/sarus-ops/deploy.sh ${ARTIFACT} ${TARGET_MACHINE} ${NAME} ${DEPLOYMENT_TYPE}

fast_test:
  stage: fast_test
  only:
    - master
    - develop
    - tags
    - /^.*_reframe$/
    - /^.*_smoke$/
  script:
    - "echo PWD: ${PWD}"
    - TARGET_MACHINE=${TARGET_MACHINE:-undefined}
    - NAME=${CI_COMMIT_TAG:-${CI_COMMIT_BRANCH}}
    - DEPLOYMENT_TYPE=${DEPLOYMENT_TYPE:-development}
    - /home/gitlab-runner/sarus-ops/fast_test.sh ${TARGET_MACHINE} ${NAME} ${DEPLOYMENT_TYPE}

full_test:
  stage: full_test
  only:
    - master
    - develop
    - tags
    - /^.*_reframe$/
  script:
    - "echo PWD: ${PWD}"
    - TARGET_MACHINE=${TARGET_MACHINE:-undefined}
    - NAME=${CI_COMMIT_TAG:-${CI_COMMIT_BRANCH}}
    - DEPLOYMENT_TYPE=${DEPLOYMENT_TYPE:-development}
    - /home/gitlab-runner/sarus-ops/full_test.sh ${TARGET_MACHINE} ${NAME} ${DEPLOYMENT_TYPE}
