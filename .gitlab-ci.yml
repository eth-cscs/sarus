default:
  tags:
    - olivone

stages:
  - prepare_pipeline
  - build_images
  - build_and_test
  - artifact_store
  - from_source
  - publish_images
  - cleanup
  - staging
  - deploy
  - fast_test
  - full_test

variables:
  GIT_SUBMODULE_STRATEGY: normal
  HOST_CACHES_PATH: /var/lib/gitlab-runner/cache/ids/sarus

get_credentials:
  image: vault:latest
  stage: prepare_pipeline
  tags:
    - Fulen
    - K8s
  script:
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=c4k-ci jwt=$CI_JOB_JWT)"
    - if [[ ${#VAULT_TOKEN} -lt 3 ]]; then echo "ERROR, Vault token empty"; exit 1; fi
    - export JFROG_USER="$(vault kv get -field=JFROG_USER $VAULT_PATH)"
    - export JFROG_TOKEN="$(vault kv get -field=JFROG_TOKEN $VAULT_PATH)"
    - echo "JFROG_USER=${JFROG_USER}" >> credentials.env
    - echo "JFROG_TOKEN=${JFROG_TOKEN}" >> credentials.env
  artifacts:
    public: false
    expire_in: 200 minute
    reports:
      dotenv: credentials.env

clean_caches:
  stage: prepare_pipeline
  only:
    - schedules
    - clean-caches
  script:
    # Sarus known to be the only project running on this runner
    # https://confluence.cscs.ch/x/Y4DtCw
    - rm -rf $HOST_CACHES_PATH
    - docker system prune -f

prepare_pipeline:
  stage: prepare_pipeline
  script:
    - /home/gitlab-runner/sarus-ops/update.sh
    - CI/check_host.sh

build_dependencies:
  stage: build_images
  script:
    - . CI/utility_docker_functions.bash Debug gcc.cmake $(pwd) $HOST_CACHES_PATH standalone-build standalone-run
    - sarus-build-images

documentation:
  stage: build_and_test
  script:
    - . CI/utility_docker_functions.bash Debug gcc.cmake $(pwd) $HOST_CACHES_PATH standalone-build standalone-run
    - sarus-check-version-and-docs $(pwd)

standalone_debug:
  stage: build_and_test
  script:
    - . ./CI/utility_docker_functions.bash Debug gcc.cmake $(pwd) $HOST_CACHES_PATH standalone-build standalone-run
    - sarus-build-and-test
  artifacts:
    name: "sarus-Debug-$CI_COMMIT_REF_NAME"
    paths:
      - sarus-Debug.tar.gz
      - standalone/README.md

standalone_release:
  stage: build_and_test
  script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH standalone-build standalone-run
    - sarus-build-and-test
  artifacts:
    name: "sarus-Release-$CI_COMMIT_REF_NAME"
    paths:
      - sarus-Release.tar.gz
      - standalone/README.md

artifact_store:
  stage: artifact_store
  image: releases-docker.jfrog.io/jfrog/jfrog-cli
  tags:
    - Fulen
    - K8s
  script:
    - NAME="sarus-Release-${CI_COMMIT_TAG}.tar.gz"
    - echo ">>> Performing upload ${NAME} to ${JFROG_URL}"
    - jfrog config add --artifactory-url=${JFROG_URL} --access-token=${JFROG_TOKEN} --user=${JFROG_USER}
    - jfrog config show
    - FILE="sarus-Release.tar.gz"
    - jfrog rt u ${FILE} ${JFROG_REPO}/${NAME}
  dependencies:
    - get_credentials
    - standalone_release
  rules:
    - if: $CI_COMMIT_TAG

.from_source:
  stage: from_source
  only:
    - master
    - develop
    - web

coverage:
  extends: .from_source
  script:
    - . ./CI/utility_docker_functions.bash Debug gcc-gcov.cmake $(pwd) $HOST_CACHES_PATH standalone-build standalone-run
    - sarus-build-and-test

centos7:
  extends: .from_source
  script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH centos:7 centos:7
    - sarus-build-images
    - sarus-build-from-scratch-and-test

fedora35:
  extends: .from_source
  script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH fedora:35 fedora:35
    - sarus-build-images
    - sarus-build-from-scratch-and-test

ubuntu20.04:
  extends: .from_source
  script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH ubuntu:20.04 ubuntu:20.04
    - sarus-build-images
    - sarus-build-from-scratch-and-test

ubuntu21.10:
  extends: .from_source
  script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH ubuntu:21.10 ubuntu:21.10
    - sarus-build-images
    - sarus-build-from-scratch-and-test

debian11:
  extends: .from_source
  script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH debian:11 debian:11
    - sarus-build-images
    - sarus-build-from-scratch-and-test

opensuseleap15.3:
  extends: .from_source
  script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH opensuseleap:15.3 opensuseleap:15.3
    - sarus-build-images
    - sarus-build-from-scratch-and-test

address_sanitizer:
  extends: .from_source
  script:
    - . ./CI/utility_docker_functions.bash Debug gcc-asan.cmake $(pwd) $HOST_CACHES_PATH debian:11 debian:11
    - sarus-build-images
    - sarus-build-from-scratch-and-test

.spack_package:
  extends: .from_source
  timeout: 2h
  script:
    - sarus-build-images
    - sarus-spack-test

spack_ubuntu18.04:
  extends: .spack_package
  before_script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH spack-ubuntu18.04 spack-ubuntu18.04

.scheduled_spack_package:
  extends: .spack_package
  only:
    - schedules

spack_debian10:
  extends: .scheduled_spack_package
  before_script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH spack-debian10 spack-debian10

spack_centos7:
  extends: .scheduled_spack_package
  before_script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH spack-centos7 spack-centos7

spack_fedora34:
  extends: .scheduled_spack_package
  before_script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH spack-fedora34 spack-fedora34

spack_opensuseleap15:
  extends: .scheduled_spack_package
  before_script:
    - . ./CI/utility_docker_functions.bash Release gcc.cmake $(pwd) $HOST_CACHES_PATH spack-opensuseleap15 spack-opensuseleap15

publish_images:
  stage: publish_images
  only:
    - master
    - develop
  script:
    - . ./CI/utility_docker_functions.bash
    - sarus-publish-images

cleanup_images:
  stage: cleanup
  except:
    - master
    - develop
  script:
    - . ./CI/utility_docker_functions.bash
    - sarus-cleanup-images

trigger_ops:
  stage: staging
  variables:
    TEMP_PACKAGE: "sarus-Release-$CI_COMMIT_TAG.tar.gz"
    version: $CI_COMMIT_TAG
  trigger:
    project: 'ids/sarus-ops'
    strategy: depend
  rules:
    - if: $CI_COMMIT_TAG

deploy:
  stage: deploy
  only:
    - master
    - develop
    - tags
    - /^.*_reframe$/
    - /^.*_smoke$/
  script:
    - "echo PWD: ${PWD}"
    - ARTIFACT=sarus-Release.tar.gz
    - TARGET_MACHINE=${TARGET_MACHINE:-undefined}
    - DEPLOYMENT_TYPE=${DEPLOYMENT_TYPE:-development}
    - NAME=${CI_COMMIT_TAG:-${CI_COMMIT_BRANCH}}
    - /home/gitlab-runner/sarus-ops/deploy.sh ${ARTIFACT} ${TARGET_MACHINE} ${NAME} ${DEPLOYMENT_TYPE}

fast_test:
  stage: fast_test
  only:
    - master
    - develop
    - tags
    - /^.*_reframe$/
    - /^.*_smoke$/
  script:
    - "echo PWD: ${PWD}"
    - TARGET_MACHINE=${TARGET_MACHINE:-undefined}
    - NAME=${CI_COMMIT_TAG:-${CI_COMMIT_BRANCH}}
    - DEPLOYMENT_TYPE=${DEPLOYMENT_TYPE:-development}
    - /home/gitlab-runner/sarus-ops/fast_test.sh ${TARGET_MACHINE} ${NAME} ${DEPLOYMENT_TYPE}

full_test:
  stage: full_test
  only:
    - master
    - develop
    - tags
    - /^.*_reframe$/
  script:
    - "echo PWD: ${PWD}"
    - TARGET_MACHINE=${TARGET_MACHINE:-undefined}
    - NAME=${CI_COMMIT_TAG:-${CI_COMMIT_BRANCH}}
    - DEPLOYMENT_TYPE=${DEPLOYMENT_TYPE:-development}
    - /home/gitlab-runner/sarus-ops/full_test.sh ${TARGET_MACHINE} ${NAME} ${DEPLOYMENT_TYPE}
